import * as AllProjectExports from './imports';

class Seatbelt {
  constructor() {
    this.plugins = {};
    this.pluginConfigs = {};
    this.pluginConfigNames = [];
    this.server = null;

    this.init = () => {
      this.initializedAllPluginTypes();
      this.throwErrorIfNoServerDeclared();
      this.runPluginConfigs(() => {
        this.configureServerAndBootServer();
      });
    }

    // iterates all files exported by the entire application and sorts them by plugin type
    this.initializedAllPluginTypes = () => {
      if (AllProjectExports && typeof AllProjectExports === 'object') {
        Object.keys(AllProjectExports).forEach(eachFileExportKey => {
          if (AllProjectExports[eachFileExportKey] && typeof AllProjectExports[eachFileExportKey] === 'object') {
            Object.keys(AllProjectExports[eachFileExportKey]).forEach(key => {
              const exportedClassesAndObjects = AllProjectExports[eachFileExportKey][key];
              if (exportedClassesAndObjects && typeof exportedClassesAndObjects === 'object') {
                Object.keys(exportedClassesAndObjects).forEach(key2 => {
                  const SeatbeltPluginClassOrObject = exportedClassesAndObjects[key2];
                  this.initPlugin(SeatbeltPluginClassOrObject);
                });
              }
            });
          }
        });
      }
    }

    this.initPlugin = (SeatbeltPluginClassOrObject) => {
      let initializedPlugin;
      if (SeatbeltPluginClassOrObject && SeatbeltPluginClassOrObject.prototype) {
        initializedPlugin = new SeatbeltPluginClassOrObject();
      } else {
        initializedPlugin = SeatbeltPluginClassOrObject;
      }
      if (typeof initializedPlugin === 'object') {
        if (initializedPlugin.__seatbeltPluginType === 'server') {
          this.server = initializedPlugin;
        } else if (initializedPlugin.__seatbeltPluginType === 'config') {
          this.pluginConfigs[initializedPlugin.__seatbeltPluginName] = initializedPlugin;
          this.pluginConfigNames.push(initializedPlugin.__seatbeltPluginName);
        } else if (initializedPlugin.__seatbeltPluginType === 'plugin') {
          if (!this.plugins[initializedPlugin.__seatbeltPluginName]) {
            this.plugins[initializedPlugin.__seatbeltPluginName] = [];
          }
          this.plugins[initializedPlugin.__seatbeltPluginName].push(initializedPlugin);
        }
      }
    }

    this.throwErrorIfNoServerDeclared = () => {
      if (!this.server) {
        throw new Error('failed to initialize server, did you forget to export one?')
      }
    }

    this.runPluginConfigs = (cb) => {
      const recursivePluginConfig = (pluginNames) => {
        if (this.pluginConfigs[pluginNames[0]].config) {
          this.pluginConfigs[pluginNames[0]].config(this, () => {
            if (pluginNames.length > 1) {
              this.runPluginConfigs(pluginNames.slice(1));
            } else {
              cb();
            }
          });
        }
      }
      recursivePluginConfig(this.pluginConfigNames);
    }

    this.configureServerAndBootServer = () => {
      this.server.config(this, () => {
        this.server.init(this);
      });
    }
  }
}

const seatbelt = new Seatbelt();

seatbelt.init();
